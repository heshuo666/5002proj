import numpy as np
np.set_printoptions(threshold=np.inf)
import pandas as pd
import sys
import os
import warnings
warnings.filterwarnings('ignore')
import math
from matrixprofile import *
import matplotlib.pyplot as plt
import matplotlib as mpl

def dataLoad(data_path):
    dir_list = os.listdir(data_path)
    tot_dfs = [None]

    anomaly_file_1 = set([204, 205])
    anomaly_file_2 = set([206, 207, 208, 242, 243, 225, 226])
    index = 1

    for filename in dir_list[0: 250]:
        df = pd.read_csv(data_path + '/' + filename, names=['values'])

        if index in anomaly_file_1:
            newDataFrame = pd.DataFrame()
            newDataFrame['values'] = list(map(float, list(df.iloc[0])[0].strip(' ').split('   ')))
            df = newDataFrame
        elif index in anomaly_file_2:
            newDataFrame = pd.DataFrame()
            newDataFrame['values'] = list(map(float, list(df.iloc[0])[0].strip(' ').split('  ')))
            df = newDataFrame

        df = df.values.ravel()
        tot_dfs.append(df)
        index += 1

    return tot_dfs

def second_order(tot_dfs):
    print("hello")

    for select in range(1, 251):
        dfs_select = tot_dfs[select]
        dfs_select_o1 = np.gradient(dfs_select)
        dfs_select_o2 = np.gradient(dfs_select_o1)
        dfs_select_o2_absolute = np.absolute(dfs_select_o2)

        np.savetxt(f"data-sets/KDD-Cup/second_order/{select}_o2.txt", dfs_select_o2_absolute, fmt='%.06f')

        plt.figure()
        # mpl.rcParams['agg.path.chunksize'] = 10000
        plt.rcParams['figure.figsize'] = (20, 16)
        plt.title(f"{select}_o2")
        plt.plot(dfs_select_o2_absolute, linewidth=0.5)
        # plt.show()
        plt.savefig(
            f"data-sets/KDD-Cup/second_order/figures/{select}_o2_figure.png",
            dpi=1000, bbox_inches='tight')
        plt.close()
        # sys.exit()
        print(f"{select} done")

        if select == 10:
            sys.exit()


def main():
    data_path = "data-sets/KDD-Cup/data"
    tot_dfs = dataLoad(data_path)

    second_order(tot_dfs)

if __name__ == "__main__":
    main()